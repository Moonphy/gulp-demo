@keyframes loader {
  from {transform: rotate(0deg);}
  to {transform: rotate(720deg);}
}
@keyframes fade-in-left {
  0% {
    opacity: 0;
    transform: translate(-100%,0);
  }
  100% {
    opacity: 1;
    transform: translate(0,0);
  }
}
@keyframes fade-in-right {
  0% {
    opacity: 0;
    transform: translate(100%,0);
  }
  100% {
    opacity: 1;
    transform: translate(0,0);
  }
}
@keyframes scale-sm-big {
  0% {
    opacity: 0;
    transform: scale(0);
  }
  20% {
    opacity: 1;
    transform: scale(1);
  }
  40% {
    opacity: 1;
    transform: scale(0);
  }
  60% {
    opacity: 1;
    transform: scale(1);
  }
  80% {
    opacity: 1;
    transform: scale(0);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes wrap-rotate {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes rule-show {
  0%{
    width: 0;
    opacity: 0;
    transform: translate(0%,100%);
  }
  100%{
    width: 90%;
    opacity: 1;
    transform: translate(0%,0%);
  }
}
@keyframes rotate-head {
  0%{
    transform: rotateY(0);
  }
  100%{
    transform: rotateY(360deg);
  }
}
/* ---- 抖动效果 ---- */

@keyframes tada{
  0%{transform:scale(1);}
  10%,20%{transform:scale(0.9) rotate(-3deg);}
  30%,50%,70%,90%{transform:scale(1.1) rotate(3deg);}
  40%,60%,80%{transform:scale(1.1) rotate(-3deg);}
  100%{transform:scale(1) rotate(20deg);}
}

@keyframes shake-chunk {
  2% {
    transform: translate(11px, 12px) rotate(-8deg); }
  4% {
    transform: translate(9px, 8px) rotate(10deg); }
  6% {
    transform: translate(13px, 13px) rotate(11deg); }
  8% {
    transform: translate(14px, -1px) rotate(-14deg); }
  10% {
    transform: translate(6px, 9px) rotate(-10deg); }
  12% {
    transform: translate(-7px, -5px) rotate(7deg); }
  14% {
    transform: translate(5px, 7px) rotate(2deg); }
  16% {
    transform: translate(7px, 2px) rotate(-12deg); }
  18% {
    transform: translate(14px, 6px) rotate(-5deg); }
  20% {
    transform: translate(-5px, -8px) rotate(7deg); }
  22% {
    transform: translate(14px, -13px) rotate(-3deg); }
  24% {
    transform: translate(15px, -3px) rotate(-3deg); }
  26% {
    transform: translate(8px, -11px) rotate(5deg); }
  28% {
    transform: translate(1px, -11px) rotate(-3deg); }
  30% {
    transform: translate(15px, 11px) rotate(0deg); }
  32% {
    transform: translate(4px, 10px) rotate(1deg); }
  34% {
    transform: translate(-11px, 11px) rotate(-6deg); }
  36% {
    transform: translate(2px, -12px) rotate(4deg); }
  38% {
    transform: translate(-2px, -6px) rotate(5deg); }
  0%, 40%, 100% {
    transform: translate(0, 0) rotate(-20deg); } }

@keyframes shake-little {
  2% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  4% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  6% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  8% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  10% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  12% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  14% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  16% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  18% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  20% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  22% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  24% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  26% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  28% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  30% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  32% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  34% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  36% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  38% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  40% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  42% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  44% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  46% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  48% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  50% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  52% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  54% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  56% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  58% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  60% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  62% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  64% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  66% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  68% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  70% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  72% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  74% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  76% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  78% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  80% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  82% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  84% {
    transform: translate(1px, 1px) rotate(0.5deg); }
  86% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  88% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  90% {
    transform: translate(1px, 0px) rotate(0.5deg); }
  92% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  94% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  96% {
    transform: translate(0px, 0px) rotate(0.5deg); }
  98% {
    transform: translate(0px, 1px) rotate(0.5deg); }
  0%, 100% {
    transform: translate(0, 0) rotate(0); }
}

//============================================
// animation应用
//============================================
/*
animation:[<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>]
*/
/*
transition-timing-function ： ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) | steps()

1、ease：（逐渐变慢）默认值，ease函数等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0).
2、linear：（匀速），linear 函数等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0).
3、ease-in：(加速)，ease-in 函数等同于贝塞尔曲线(0.42, 0, 1.0, 1.0).
4、ease-out：（减速），ease-out 函数等同于贝塞尔曲线(0, 0, 0.58, 1.0).
5、ease-in-out：（加速然后减速），ease-in-out 函数等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)
6、cubic-bezier：（该值允许你去自定义一个时间曲线）， 特定的cubic-bezier曲线。 (x1, y1, x2, y2)四个值特定于曲线上点P1和点P2。所有值需在[0, 1]区域内，否则无效。
7、steps 函数指定了一个阶跃函数
第一个参数指定了时间函数中的间隔数量（必须是正整数）
第二个参数可选，接受 start 和 end 两个值，指定在每个间隔的起点或是终点发生阶跃变化，默认为 end。
step-start等同于steps(1,start)，动画分成1步，动画执行时为开始左侧端点的部分为开始；
step-end等同于steps(1,end)：动画分成一步，动画执行时以结尾端点为开始，默认值为end。
*/
/*
animation-iteration-count:infinite | <number>
是用来指定元素播放动画的循环次数，其可以取值<number>为数字，其默认值为“1”；infinite为无限次数循环。
*/
/*
animation-direction: normal | alternate
是用来指定元素动画播放的方向，其只有两个值，默认值为normal，如果设置为normal时，动画的每次循环都是向前播放；另一个值是alternate，他的作用是，动画播放在第偶数次向前播放，第奇数次向反方向播放。
*/
/*
animation-fill-mode : none | forwards | backwards | both;
规定动画在播放之前或之后，其动画效果是否可见,默认值是none。
none不改变默认行为。
forwards当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。
backwards在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。
both 向前和向后填充模式都被应用。
*/
